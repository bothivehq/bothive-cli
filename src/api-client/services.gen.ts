// This file is auto-generated by @hey-api/openapi-ts

import { client, type Options } from "@hey-api/client-axios";
import type {
  ListBotsError,
  ListBotsResponse,
  DeployBotData,
  DeployBotError,
  DeployBotResponse,
  DeleteBotData,
  DeleteBotError,
  DeleteBotResponse,
  ShowBotData,
  ShowBotError,
  ShowBotResponse,
  ListBotRunsData,
  ListBotRunsError,
  ListBotRunsResponse,
  TriggerBotRunData,
  TriggerBotRunError,
  TriggerBotRunResponse,
  GetBotRunStatusData,
  GetBotRunStatusError,
  GetBotRunStatusResponse,
  AuthenticateUserData,
  AuthenticateUserError,
  AuthenticateUserResponse,
} from "./types.gen";

/**
 * List Bots
 * Retrieve a list of the user's Bots
 */
export const listBots = (options?: Options) => {
  return (options?.client ?? client).get<ListBotsResponse, ListBotsError>({
    ...options,
    url: "/api/bot",
  });
};

/**
 * Deploy Bot
 * Deploy a Bot
 */
export const deployBot = (options: Options<DeployBotData>) => {
  return (options?.client ?? client).post<DeployBotResponse, DeployBotError>({
    ...options,
    url: "/api/bot",
  });
};

/**
 * Delete Bot
 * Delete an existing Bot by ID and it's associated runs
 */
export const deleteBot = (options: Options<DeleteBotData>) => {
  return (options?.client ?? client).delete<DeleteBotResponse, DeleteBotError>({
    ...options,
    url: "/api/bot/{id}",
  });
};

/**
 * Get a Bot
 * Retrieve details of a specific Bot by ID
 */
export const showBot = (options: Options<ShowBotData>) => {
  return (options?.client ?? client).get<ShowBotResponse, ShowBotError>({
    ...options,
    url: "/api/bot/{id}",
  });
};

/**
 * List Bot Runs
 * Retrieve a list of runs for a specific bot
 */
export const listBotRuns = (options: Options<ListBotRunsData>) => {
  return (options?.client ?? client).get<ListBotRunsResponse, ListBotRunsError>(
    {
      ...options,
      url: "/api/bot/{id}/run",
    },
  );
};

/**
 * Trigger a Bot Run
 * Start a new run for a specific bot
 */
export const triggerBotRun = (options: Options<TriggerBotRunData>) => {
  return (options?.client ?? client).post<
    TriggerBotRunResponse,
    TriggerBotRunError
  >({
    ...options,
    url: "/api/bot/{id}/run",
  });
};

/**
 * Get Bot Run Status
 * Retrieve the status of a specific bot run
 */
export const getBotRunStatus = (options: Options<GetBotRunStatusData>) => {
  return (options?.client ?? client).get<
    GetBotRunStatusResponse,
    GetBotRunStatusError
  >({
    ...options,
    url: "/api/bot/{id}/run/{run_id}",
  });
};

/**
 * Authenticate user
 * Authenticate user and generate bearer token
 */
export const authenticateUser = (options?: Options<AuthenticateUserData>) => {
  return (options?.client ?? client).post<
    AuthenticateUserResponse,
    AuthenticateUserError
  >({
    ...options,
    url: "/api/login",
  });
};

/**
 * Logout user
 * Logout user
 */
export const logoutUser = (options?: Options) => {
  return (options?.client ?? client).get<void>({
    ...options,
    url: "/api/logout",
  });
};

/**
 * Get user token
 * Get user token
 */
export const getUserToken = (options?: Options) => {
  return (options?.client ?? client).get<void>({
    ...options,
    url: "/api/token",
  });
};

/**
 * Get user information
 * Get user information
 */
export const getUserInfo = (options?: Options) => {
  return (options?.client ?? client).get<void>({
    ...options,
    url: "/api/whoami",
  });
};
